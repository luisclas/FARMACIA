/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CapaPresentacion;

import CapaDatos.EntradaProducto;
import CapaDatos.Kardex;
import CapaDatos.Medida;
import CapaNegocios.ColorearColumnasJTable;
import CapaNegocios.EntradaProductoBD;
import CapaNegocios.KardexBD;
import CapaNegocios.MedidaBD;
import CapaNegocios.ProductoBD;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saucedo
 */
public class EntradaProductos_IU extends javax.swing.JInternalFrame {

    List<Medida> lista_medida;

    /**
     * Creates new form EntradaProductos_IU
     */
    public EntradaProductos_IU() {
        initComponents();
        sacarHora();
        cargarMedida();
        sacarFecha();
        
           ColorearColumnasJTable col5= new ColorearColumnasJTable(5, Color.YELLOW);
        
        ColorearColumnasJTable col7= new ColorearColumnasJTable(7, Color.PINK);
        
        tabla_entrada_productos.getColumnModel().getColumn(5).setCellRenderer(col5);
        tabla_entrada_productos.getColumnModel().getColumn(7).setCellRenderer(col7);
    }

    private void cargarMedida() {
        try {
            cmbMedida.removeAllItems();

            MedidaBD oMedidaBD = new MedidaBD();
            DefaultTableModel tabla_temporal;
            tabla_temporal = oMedidaBD.reportarMedida();

            lista_medida = new ArrayList<>();
            cmbMedida.addItem("Seleccionar");

            for (int i = 0; i < tabla_temporal.getRowCount(); i++) {
                int codigo = Integer.valueOf(tabla_temporal.getValueAt(i, 0).toString());
                String presentacion = String.valueOf(tabla_temporal.getValueAt(i, 1));
                String equivalencia = String.valueOf(tabla_temporal.getValueAt(i, 2));

                lista_medida.add(new Medida(codigo, presentacion, equivalencia));
                cmbMedida.addItem(presentacion);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error al cargar medida", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sacarHora() {

        Calendar calendario = Calendar.getInstance();

        int hora = calendario.get(Calendar.HOUR_OF_DAY);
        int minutos = calendario.get(Calendar.MINUTE);
        int segundos = calendario.get(Calendar.SECOND);

        int nueva_hora = hora;

        String tiempo = nueva_hora + ":" + minutos + ":" + segundos;

        txtHora.setText(tiempo);
    }

    private void sacarFecha() {
        Calendar calendario = Calendar.getInstance();

        int dia = calendario.get(Calendar.DAY_OF_MONTH);
        int mes = calendario.get(Calendar.MONTH)+1;
        int anio = calendario.get(Calendar.YEAR);

        String fecha = anio + "-" + mes + "-" + dia;

        txtFecha.setText(fecha);
    }

    private void exito(String mensaje) {
        JOptionPane.showConfirmDialog(this, mensaje, "MENSAJE", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
    }

    private void error(String mensaje) {
        JOptionPane.showConfirmDialog(this, mensaje, "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
    }

    private void advertencia(String mensaje) {
        JOptionPane.showConfirmDialog(this, mensaje, "ADVERTENCIA", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
    }

    private void limpiar_tabla_formulario() {
        DefaultTableModel tabla_entrada_productos_temporal = (DefaultTableModel) tabla_entrada_productos.getModel();
        tabla_entrada_productos_temporal.setRowCount(0);
    }

    private void limpiar_caja_precio() {
        txtCantidadPresentacion.setText("");
        txtCantidadEquivalencia.setText("");
        txtMargenGananciaPresentacion.setText("0");
        txtMargenGananciaEquivalencia.setText("0");
        txtPrecioCompraPresentacion.setText("");
        txtPrecioCompraUnidades.setText("");
        txtPrecioVentaPresentacion.setText("");
        txtPrecioVentaUnidades.setText("");
    }

    private void limpiar_producto() {
        txtBarras.setText("");
        txtProducto.setText("");
        txtLote.setText("");
        txtEquivalencia.setText("");
        dcFechaVcto.setDate(null);
        cargarMedida();
    }
    private void limpiar_entrada(){
        txtNroDocumento.setText("");
        cargarMedida();
        limpiar_tabla_formulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField11 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmbTipoDocumento = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbProceso = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNroDocumento = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtBarras = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dcFechaVcto = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        txtLote = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbMedida = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txtCantidadPresentacion = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtEquivalencia = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtCantidadEquivalencia = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtPrecioCompraPresentacion = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtPrecioCompraUnidades = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtMargenGananciaPresentacion = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtMargenGananciaEquivalencia = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtPrecioVentaPresentacion = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtPrecioVentaUnidades = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmbTienda = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_entrada_productos = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        jTextField11.setText("jTextField11");

        setBackground(new java.awt.Color(204, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("ENTRADA DE PRODUCTOS");

        jLabel1.setText("TIPO DOCUMENTO");

        cmbTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "FACTURA", "BOLETA" }));

        jLabel2.setText("PROCESO");

        cmbProceso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "COMPRA", "INVENTARIO INICIAL", "OTROS" }));

        jLabel3.setText("HORA");

        txtHora.setEnabled(false);

        jLabel4.setText("NRO DOCUMENTO");

        txtNroDocumento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNroDocumentoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNroDocumentoFocusLost(evt);
            }
        });
        txtNroDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroDocumentoKeyPressed(evt);
            }
        });

        jLabel5.setText("FECHA");

        txtFecha.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("BARRAS");

        txtBarras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarrasActionPerformed(evt);
            }
        });
        txtBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBarrasKeyTyped(evt);
            }
        });

        jLabel7.setText("PRODUCTO");

        txtProducto.setEnabled(false);

        jLabel8.setText("FECHA VCTO");

        jLabel9.setText("LOTE");

        txtLote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLoteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLoteFocusLost(evt);
            }
        });
        txtLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLoteKeyPressed(evt);
            }
        });

        jLabel11.setText("PRESENTACION");

        cmbMedida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMedidaItemStateChanged(evt);
            }
        });
        cmbMedida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbMedidaKeyPressed(evt);
            }
        });

        jLabel12.setText("CANT. PRES");

        txtCantidadPresentacion.setEnabled(false);
        txtCantidadPresentacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCantidadPresentacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCantidadPresentacionFocusLost(evt);
            }
        });
        txtCantidadPresentacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadPresentacionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadPresentacionKeyTyped(evt);
            }
        });

        jLabel13.setText("EQUIVALENCIA");

        txtEquivalencia.setEnabled(false);
        txtEquivalencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEquivalenciaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEquivalenciaFocusLost(evt);
            }
        });

        jLabel14.setText("CANT. EQV");

        txtCantidadEquivalencia.setEnabled(false);
        txtCantidadEquivalencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCantidadEquivalenciaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCantidadEquivalenciaFocusLost(evt);
            }
        });
        txtCantidadEquivalencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadEquivalenciaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadEquivalenciaKeyTyped(evt);
            }
        });

        jLabel15.setText("PCP");

        txtPrecioCompraPresentacion.setEnabled(false);
        txtPrecioCompraPresentacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecioCompraPresentacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioCompraPresentacionFocusLost(evt);
            }
        });
        txtPrecioCompraPresentacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioCompraPresentacionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioCompraPresentacionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioCompraPresentacionKeyTyped(evt);
            }
        });

        jLabel16.setText("PCU");

        txtPrecioCompraUnidades.setEnabled(false);
        txtPrecioCompraUnidades.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecioCompraUnidadesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioCompraUnidadesFocusLost(evt);
            }
        });
        txtPrecioCompraUnidades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioCompraUnidadesKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioCompraUnidadesKeyTyped(evt);
            }
        });

        jLabel17.setText("MARGEN G. PRES.");

        txtMargenGananciaPresentacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMargenGananciaPresentacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMargenGananciaPresentacionFocusLost(evt);
            }
        });
        txtMargenGananciaPresentacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMargenGananciaPresentacionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMargenGananciaPresentacionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMargenGananciaPresentacionKeyTyped(evt);
            }
        });

        jLabel18.setText("MARGEN G. EQUI");

        txtMargenGananciaEquivalencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMargenGananciaEquivalenciaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMargenGananciaEquivalenciaFocusLost(evt);
            }
        });
        txtMargenGananciaEquivalencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMargenGananciaEquivalenciaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMargenGananciaEquivalenciaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMargenGananciaEquivalenciaKeyTyped(evt);
            }
        });

        jLabel19.setText("PVP");

        txtPrecioVentaPresentacion.setEnabled(false);
        txtPrecioVentaPresentacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecioVentaPresentacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioVentaPresentacionFocusLost(evt);
            }
        });
        txtPrecioVentaPresentacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioVentaPresentacionKeyTyped(evt);
            }
        });

        jLabel20.setText("PVU");

        txtPrecioVentaUnidades.setEnabled(false);
        txtPrecioVentaUnidades.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecioVentaUnidadesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioVentaUnidadesFocusLost(evt);
            }
        });
        txtPrecioVentaUnidades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioVentaUnidadesKeyTyped(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes/add.png"))); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes/cerrar2.png"))); // NOI18N
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbMedida, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(txtBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dcFechaVcto, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCantidadPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCantidadEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPrecioCompraPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel15)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPrecioCompraUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMargenGananciaPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(96, 96, 96)
                                .addComponent(jLabel17)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtMargenGananciaEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPrecioVentaPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel19)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(txtPrecioVentaUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addComponent(btnAgregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuitar)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dcFechaVcto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(txtBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidadPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidadEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecioCompraPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecioCompraUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMargenGananciaPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMargenGananciaEquivalencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecioVentaPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecioVentaUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnQuitar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3))
                            .addComponent(btnAgregar))
                        .addGap(3, 3, 3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel10.setText("TIENDA");

        cmbTienda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRINCIPAL" }));

        tabla_entrada_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SERIE", "PRODUCTO", "LOTE", "FECHAVCTO", "SP", "SEQV", "PCPRES", "PCEQV", "IMPORTE", "MARGEN_PRESENTACION", "MARGEN_EQUIVALENCIA", "PVPRESMAYOR", "PVEQMAYOR", "PRESENTACION", "EQUIVALENCIA", "REF", "PVPMENOR", "PVEQVMENOR"
            }
        ));
        jScrollPane1.setViewportView(tabla_entrada_productos);

        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes/disk.png"))); // NOI18N
        btnRegistrar.setText("REGISTRAR");
        btnRegistrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRegistrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes/cross.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCerrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNroDocumento))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFecha)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTienda, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(cmbTienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCerrar)
                    .addComponent(btnRegistrar))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBarrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarrasActionPerformed
        // TODO add your handling code here:
        if (txtBarras.getText().length() > 0) {
            DefaultTableModel tabla_temporal;
            ProductoBD oProductoBD = new ProductoBD();
            tabla_temporal = oProductoBD.buscarProducto(txtBarras.getText().trim());
            if (tabla_temporal.getRowCount() > 0) {

                txtProducto.setText(tabla_temporal.getValueAt(0, 1).toString());

            } else {
                error("No se encontro el producto con ese codigo de barras....");
                txtBarras.requestFocus();
                txtProducto.setText("");
            }
        } else {
            advertencia("Ingrese codigo de barras....");

        }
    }//GEN-LAST:event_txtBarrasActionPerformed

    private void cmbMedidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMedidaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == evt.SELECTED) {
            String textoSeleccionado = cmbMedida.getSelectedItem().toString();
            if (textoSeleccionado.equals("Seleccionar")) {
                txtEquivalencia.setText("");
                txtCantidadEquivalencia.setEnabled(false);
                txtPrecioCompraPresentacion.setEnabled(false);
                txtPrecioCompraUnidades.setEnabled(false);
                txtCantidadPresentacion.setEnabled(false);

                limpiar_caja_precio();

            } else {

                int i = cmbMedida.getSelectedIndex() - 1;
                txtEquivalencia.setText("" + lista_medida.get(i).getPreEquivalencia());
                String presentacion = cmbMedida.getSelectedItem().toString();
                String equivalencia = txtEquivalencia.getText();
                
                if (presentacion.equals(equivalencia)) {
                    txtCantidadPresentacion.setEnabled(false);
                    txtPrecioCompraPresentacion.setEnabled(false);
                    txtPrecioCompraUnidades.setEnabled(true);
                    txtCantidadEquivalencia.setEnabled(true);
                    txtMargenGananciaPresentacion.setEnabled(false);
                    

                    txtCantidadEquivalencia.requestFocus();
                    limpiar_caja_precio();

                } else {

                    txtCantidadPresentacion.setEnabled(true);
                    txtPrecioCompraPresentacion.setEnabled(true);
                    txtPrecioCompraUnidades.setEnabled(false);
                    txtCantidadEquivalencia.setEnabled(true);
                    txtMargenGananciaPresentacion.setEnabled(true);
                    txtCantidadPresentacion.requestFocus();
                    limpiar_caja_precio();
                }
            }
        }

    }//GEN-LAST:event_cmbMedidaItemStateChanged

    private void txtPrecioCompraPresentacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraPresentacionKeyReleased
        // TODO add your handling code here:
        try {
            if (txtCantidadEquivalencia.getText().length() > 0) {

                int cant_equivalencia = Integer.parseInt(txtCantidadEquivalencia.getText().trim());
                double precio_compra = Double.parseDouble(txtPrecioCompraPresentacion.getText().trim());

                DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);
                DecimalFormat df = new DecimalFormat("#.##", symbols);

                double precio_compra_unidades = precio_compra / cant_equivalencia;

                txtPrecioCompraUnidades.setText("" + df.format(precio_compra_unidades));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtPrecioCompraPresentacionKeyReleased

    private void txtMargenGananciaPresentacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaPresentacionKeyReleased
        // TODO add your handling code here:
        try {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);
            DecimalFormat df = new DecimalFormat("#.#", symbols);

            double precio_compra_presentacion = Double.parseDouble(txtPrecioCompraPresentacion.getText().trim());
            double margen = Integer.parseInt(txtMargenGananciaPresentacion.getText().trim());

            double ganancia_presentacion = precio_compra_presentacion * (margen / 100);
            double precio_venta_presentacion = precio_compra_presentacion + ganancia_presentacion;
            double redondeado_presentacion = Math.round(precio_venta_presentacion);

            txtPrecioVentaPresentacion.setText("" + df.format(redondeado_presentacion));

        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtMargenGananciaPresentacionKeyReleased

    private void txtMargenGananciaEquivalenciaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaEquivalenciaKeyReleased
        // TODO add your handling code here:
        try {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);
            DecimalFormat df = new DecimalFormat("#.#", symbols);

            double precio_compra_equivalencia = Double.parseDouble(txtPrecioCompraUnidades.getText().trim());
            double margen = Integer.parseInt(txtMargenGananciaEquivalencia.getText().trim());

            double ganancia_equivalencia = precio_compra_equivalencia * (margen / 100);

            double precio_venta_equivalencia = precio_compra_equivalencia + ganancia_equivalencia;

            String redondeado_equivalencia = df.format(precio_venta_equivalencia);

            txtPrecioVentaUnidades.setText(redondeado_equivalencia);

        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtMargenGananciaEquivalenciaKeyReleased

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        if (txtProducto.getText().length() > 0) {
            if (cmbMedida.getSelectedIndex() != 0) {
                if (txtMargenGananciaPresentacion.getText().length() > 0) {
                    
                    String presentacion = cmbMedida.getSelectedItem().toString();
                    String equivalencia = txtEquivalencia.getText();
                    String serie = txtBarras.getText();
                    String producto = txtProducto.getText();
                    String lote = txtLote.getText().toUpperCase();
                    SimpleDateFormat dcn = new SimpleDateFormat("yyyy-MM-dd");
                    String fechaVcto = dcn.format(dcFechaVcto.getDate());
                    int ref = Integer.parseInt(txtCantidadEquivalencia.getText().trim());
                    int margenPresentacion = Integer.parseInt(txtMargenGananciaPresentacion.getText().trim());
                    int margenEquivalencia = Integer.parseInt(txtMargenGananciaEquivalencia.getText().trim());

                    if (presentacion.equals(equivalencia)) {
                        int cant_equivalencia = Integer.parseInt(txtCantidadEquivalencia.getText().trim());
                        double precio_compra_unidades = Double.parseDouble(txtPrecioCompraUnidades.getText().trim());
                        double precio_venta_unidades_mayor = Double.parseDouble(txtPrecioVentaUnidades.getText().trim());
                        double importe = precio_compra_unidades * cant_equivalencia;
                        DefaultTableModel tabla_entrada_productos_temporal = (DefaultTableModel) tabla_entrada_productos.getModel();
                        int cant_presentacion = 0;
                        double precio_compra_presentacion = 0;
                        double precio_venta_presentacion_mayor = 0;
                        ref = 0;
                        double precio_venta_presentacion_menor = 0;
                        double precio_venta_unidades_menor = precio_compra_unidades + (precio_compra_unidades * 0.20);
                        Object[] data = {serie, producto, lote, fechaVcto, cant_presentacion, cant_equivalencia, precio_compra_presentacion, 
                        precio_compra_unidades, importe, margenPresentacion, margenEquivalencia, precio_venta_presentacion_mayor, precio_venta_unidades_mayor, 
                        presentacion, equivalencia, ref, precio_venta_presentacion_menor, precio_venta_unidades_menor};
                        tabla_entrada_productos_temporal.addRow(data);
                    } else {
                        int cant_presentacion = Integer.parseInt(txtCantidadPresentacion.getText().trim());
                        int cant_unidades = Integer.parseInt(txtCantidadEquivalencia.getText().trim());
                        int cant_equivalencia = cant_presentacion * cant_unidades;
                        double precio_compra_unidades = Double.parseDouble(txtPrecioCompraUnidades.getText().trim());
                        double precio_ventas_unidades_mayor = Double.parseDouble(txtPrecioVentaUnidades.getText().trim());
                        double precio_compra_presentacion = Double.parseDouble(txtPrecioCompraPresentacion.getText().trim());
                        double precio_venta_presentacion_mayor = Double.parseDouble(txtPrecioVentaPresentacion.getText().trim());
                        double importe = precio_compra_presentacion * cant_presentacion;
                        DefaultTableModel tabla_entrada_productos_temporal = (DefaultTableModel) tabla_entrada_productos.getModel();
                        double precio_venta_presentacion_menor = precio_compra_presentacion + (precio_compra_presentacion * 0.20);
                        double precio_venta_unidades_menor = precio_compra_unidades + (precio_compra_unidades * 0.20);
                        Object[] data = {serie, producto, lote, fechaVcto, cant_presentacion, cant_equivalencia, precio_compra_presentacion, 
                            precio_compra_unidades, importe, margenPresentacion, margenEquivalencia, precio_venta_presentacion_mayor, precio_ventas_unidades_mayor, 
                            presentacion, equivalencia, ref, precio_venta_presentacion_menor, precio_venta_unidades_menor};
                        tabla_entrada_productos_temporal.addRow(data);

                    }
                    limpiar_caja_precio();
                    limpiar_producto();
                    txtBarras.requestFocus();

                } else {
                    advertencia("Tiene que colocar un margen de ganancia");
                    txtMargenGananciaPresentacion.requestFocus();
                }
            } else {
                advertencia("Tiene que seleccionar una medida del producto");
                cmbMedida.requestFocus();
            }
        } else {
            advertencia("Tiene que buscar un producto");
            txtBarras.requestFocus();
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tabla_entrada_productos.getSelectedRow();
        try {
            DefaultTableModel tabla_temporal_entradas = (DefaultTableModel) tabla_entrada_productos.getModel();
            tabla_temporal_entradas.removeRow(filaSeleccionada);

            tabla_entrada_productos.setModel(tabla_temporal_entradas);
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(null, "Error al quitar", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        int cant_productos = tabla_entrada_productos.getRowCount();
        if (cant_productos > 0) {
            if (txtNroDocumento.getText().length() > 0) {
                EntradaProducto oEntradaProducto = new EntradaProducto();
                EntradaProductoBD oEntradaProductoBD = new EntradaProductoBD();
                Kardex oKardex = new Kardex();
                KardexBD oKardexBD = new KardexBD();
                
                String tipo_documento = cmbTipoDocumento.getSelectedItem().toString();
                String proceso = cmbProceso.getSelectedItem().toString();
                String hora = txtHora.getText().trim();
                String fecha = txtFecha.getText().trim();
                String nroDocumento = txtNroDocumento.getText().trim().toUpperCase();
                String tienda = cmbTienda.getSelectedItem().toString();
                DefaultTableModel tabla_temporal_entradas = (DefaultTableModel) tabla_entrada_productos.getModel();
                for (int i = 0; i < cant_productos; i++) {
                    String serie = tabla_temporal_entradas.getValueAt(i, 0).toString();
                    String producto = tabla_temporal_entradas.getValueAt(i, 1).toString();
                    String lote = tabla_temporal_entradas.getValueAt(i, 2).toString();
                    String fecha_vcto = tabla_temporal_entradas.getValueAt(i, 3).toString();
                    int stock_presentacion = Integer.parseInt(tabla_temporal_entradas.getValueAt(i, 4).toString());
                    int stock_equivalencia = Integer.parseInt(tabla_temporal_entradas.getValueAt(i, 5).toString());
                    double precio_compra_presentacion = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 6).toString());
                    double precio_compra_equivalencia = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 7).toString());
                    double importe = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 8).toString());
                    int margenPresentacion = Integer.parseInt(tabla_temporal_entradas.getValueAt(i, 9).toString());
                    int margenEquivalencia = Integer.parseInt(tabla_temporal_entradas.getValueAt(i, 10).toString());
                    double precio_venta_presentacion_mayor = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 11).toString());
                    double precio_venta_presentacion_menor = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 16).toString());
                    double precio_venta_equivalencia_mayor = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 12).toString());
                    double precio_venta_equivalencia_menor = Double.parseDouble(tabla_temporal_entradas.getValueAt(i, 17).toString());
                    String presentacion = tabla_temporal_entradas.getValueAt(i, 13).toString();
                    String equivalencia = tabla_temporal_entradas.getValueAt(i, 14).toString();
                    int cantRef = Integer.parseInt(tabla_temporal_entradas.getValueAt(i, 15).toString());

                    oEntradaProducto.setpSerie(serie);
                    oEntradaProducto.setLote(lote);
                    oEntradaProducto.setPresentacion(presentacion);
                    oEntradaProducto.setEquivalencia(equivalencia);
                    oEntradaProducto.setFechaVcto(fecha_vcto);
                    oEntradaProducto.setStockPresentacion(stock_presentacion);
                    oEntradaProducto.setStockEquivalencia(stock_equivalencia);
                    oEntradaProducto.setPrecioCompraPresentacion(precio_compra_presentacion);
                    oEntradaProducto.setPrecioCompraEquivalencia(precio_compra_equivalencia);
                    oEntradaProducto.setMargenGananciaPresentacion(margenPresentacion);
                    oEntradaProducto.setMargenGananciaEquivalencia(margenEquivalencia);
                    oEntradaProducto.setPrecioVentaPresentacionMayor(precio_venta_presentacion_mayor);
                    oEntradaProducto.setPrecioVentaPresentacionMenor(precio_venta_presentacion_menor);
                    oEntradaProducto.setPrecioVentaEquivalenciaMayor(precio_venta_equivalencia_mayor);
                    oEntradaProducto.setPrecioVentaEquivalenciaMenor(precio_venta_equivalencia_menor);
                    oEntradaProducto.setRef(cantRef);
                    oEntradaProducto.setTienda(tienda);
                    
                    oKardex.setFecha(fecha);
                    oKardex.setHora(hora);
                    oKardex.setTipoOperacion("ENTRADA");
                    oKardex.setkDescripcion(proceso + " " + producto + " - " + tipo_documento + " : " + nroDocumento);
                    oKardex.setpSerie(serie);
                    oKardex.setLote(lote);
                    
                    int stock_medida;
                    double precio_medida;
                    String medida;
                    
                    if (presentacion.equals(equivalencia)) {
                        stock_medida = stock_equivalencia;
                        precio_medida = precio_compra_equivalencia;
                        medida = equivalencia;
                    } else {
                        stock_medida = stock_presentacion;
                        precio_medida = precio_compra_presentacion;
                        medida = presentacion;
                        
                    }
                    oKardex.setPresentacion(medida);
                    oKardex.setkCantidad(stock_medida);
                    oKardex.setkPrecio(precio_medida);
                    oKardex.setkImporte(importe);
                    oKardex.setTienda(tienda);
                    
                    oEntradaProductoBD.registrarEntradaProducto(oEntradaProducto);
                    oKardexBD.registrarKardex(oKardex);
                    

                }
                exito("Se registro los productos con exito...");
                limpiar_caja_precio();
                limpiar_producto();
                limpiar_entrada();
                limpiar_tabla_formulario();
              

            } else {
                advertencia("Ingrese el numero de documento");
                txtNroDocumento.requestFocus();
            }
        } else {
            advertencia("Ingrese el numero de documento");
            txtBarras.requestFocus();
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtNroDocumentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNroDocumentoFocusGained
        // TODO add your handling code here:
        txtNroDocumento.setBackground(Color.yellow);
    }//GEN-LAST:event_txtNroDocumentoFocusGained

    private void txtNroDocumentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNroDocumentoFocusLost
        // TODO add your handling code here:
        txtNroDocumento.setBackground(Color.white);
    }//GEN-LAST:event_txtNroDocumentoFocusLost

    private void txtLoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoteFocusGained
        // TODO add your handling code here:
        txtLote.setBackground(Color.yellow);
    }//GEN-LAST:event_txtLoteFocusGained

    private void txtLoteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoteFocusLost
        // TODO add your handling code here:
        txtLote.setBackground(Color.white);
    }//GEN-LAST:event_txtLoteFocusLost

    private void txtMargenGananciaPresentacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMargenGananciaPresentacionFocusGained
        // TODO add your handling code here:
        txtMargenGananciaPresentacion.setBackground(Color.yellow);
    }//GEN-LAST:event_txtMargenGananciaPresentacionFocusGained

    private void txtMargenGananciaPresentacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMargenGananciaPresentacionFocusLost
        // TODO add your handling code here:
        txtMargenGananciaPresentacion.setBackground(Color.white);
    }//GEN-LAST:event_txtMargenGananciaPresentacionFocusLost

    private void txtMargenGananciaEquivalenciaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMargenGananciaEquivalenciaFocusGained
        // TODO add your handling code here:
        txtMargenGananciaEquivalencia.setBackground(Color.yellow);
    }//GEN-LAST:event_txtMargenGananciaEquivalenciaFocusGained

    private void txtMargenGananciaEquivalenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMargenGananciaEquivalenciaFocusLost
        // TODO add your handling code here:
        txtMargenGananciaEquivalencia.setBackground(Color.white);
    }//GEN-LAST:event_txtMargenGananciaEquivalenciaFocusLost

    private void txtBarrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarrasKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtBarrasKeyTyped

    private void txtMargenGananciaPresentacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaPresentacionKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtMargenGananciaPresentacionKeyTyped

    private void txtMargenGananciaEquivalenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaEquivalenciaKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtMargenGananciaEquivalenciaKeyTyped

    private void txtCantidadPresentacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadPresentacionKeyTyped
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtCantidadPresentacionKeyTyped

    private void txtCantidadEquivalenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadEquivalenciaKeyTyped
        // TODO add your handling code here:
         
    }//GEN-LAST:event_txtCantidadEquivalenciaKeyTyped

    private void txtPrecioCompraPresentacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraPresentacionKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPrecioCompraPresentacionKeyTyped

    private void txtPrecioCompraUnidadesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraUnidadesKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPrecioCompraUnidadesKeyTyped

    private void txtPrecioVentaPresentacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaPresentacionKeyTyped
        // TODO add your handling code here:
         
    }//GEN-LAST:event_txtPrecioVentaPresentacionKeyTyped

    private void txtPrecioVentaUnidadesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaUnidadesKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPrecioVentaUnidadesKeyTyped

    private void txtNroDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroDocumentoKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtBarras.requestFocus();
        }
    }//GEN-LAST:event_txtNroDocumentoKeyPressed

    private void txtLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLoteKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            cmbMedida.requestFocus();
        }
    }//GEN-LAST:event_txtLoteKeyPressed

    private void txtCantidadPresentacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadPresentacionFocusGained
        // TODO add your handling code here:
        txtCantidadPresentacion.setBackground(Color.yellow);
    }//GEN-LAST:event_txtCantidadPresentacionFocusGained

    private void txtCantidadPresentacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadPresentacionFocusLost
        // TODO add your handling code here:
        txtCantidadPresentacion.setBackground(Color.white);
    }//GEN-LAST:event_txtCantidadPresentacionFocusLost

    private void txtEquivalenciaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEquivalenciaFocusGained
        // TODO add your handling code here:
        txtEquivalencia.setBackground(Color.yellow);
    }//GEN-LAST:event_txtEquivalenciaFocusGained

    private void txtEquivalenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEquivalenciaFocusLost
        // TODO add your handling code here:
        txtEquivalencia.setBackground(Color.white);
    }//GEN-LAST:event_txtEquivalenciaFocusLost

    private void txtCantidadEquivalenciaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadEquivalenciaFocusGained
        // TODO add your handling code here:
        txtCantidadEquivalencia.setBackground(Color.yellow);
    }//GEN-LAST:event_txtCantidadEquivalenciaFocusGained

    private void txtCantidadEquivalenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadEquivalenciaFocusLost
        // TODO add your handling code here:
        txtCantidadEquivalencia.setBackground(Color.white);
    }//GEN-LAST:event_txtCantidadEquivalenciaFocusLost

    private void txtPrecioCompraPresentacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioCompraPresentacionFocusGained
        // TODO add your handling code here:
        txtPrecioVentaPresentacion.setBackground(Color.yellow);
    }//GEN-LAST:event_txtPrecioCompraPresentacionFocusGained

    private void txtPrecioCompraPresentacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioCompraPresentacionFocusLost
        // TODO add your handling code here:
        txtPrecioVentaPresentacion.setBackground(Color.white);
    }//GEN-LAST:event_txtPrecioCompraPresentacionFocusLost

    private void txtPrecioCompraUnidadesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioCompraUnidadesFocusGained
        // TODO add your handling code here:
        txtPrecioCompraUnidades.setBackground(Color.yellow);
    }//GEN-LAST:event_txtPrecioCompraUnidadesFocusGained

    private void txtPrecioCompraUnidadesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioCompraUnidadesFocusLost
        // TODO add your handling code here:
        txtPrecioCompraUnidades.setBackground(Color.white);
    }//GEN-LAST:event_txtPrecioCompraUnidadesFocusLost

    private void txtPrecioVentaPresentacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaPresentacionFocusGained
        // TODO add your handling code here:
        txtPrecioVentaPresentacion.setBackground(Color.yellow);
    }//GEN-LAST:event_txtPrecioVentaPresentacionFocusGained

    private void txtPrecioVentaPresentacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaPresentacionFocusLost
        // TODO add your handling code here:
        txtPrecioVentaPresentacion.setBackground(Color.white);
    }//GEN-LAST:event_txtPrecioVentaPresentacionFocusLost

    private void txtPrecioVentaUnidadesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaUnidadesFocusGained
        // TODO add your handling code here:
        txtPrecioVentaUnidades.setBackground(Color.yellow);
    }//GEN-LAST:event_txtPrecioVentaUnidadesFocusGained

    private void txtPrecioVentaUnidadesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaUnidadesFocusLost
        // TODO add your handling code here:
        txtPrecioVentaUnidades.setBackground(Color.white);
    }//GEN-LAST:event_txtPrecioVentaUnidadesFocusLost

    private void cmbMedidaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbMedidaKeyPressed
        // TODO add your handling code here:
         if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtCantidadPresentacion.requestFocus();
            
        }
    }//GEN-LAST:event_cmbMedidaKeyPressed

    private void txtCantidadPresentacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadPresentacionKeyPressed
        // TODO add your handling code here:
         if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtCantidadEquivalencia.requestFocus();
        }
    }//GEN-LAST:event_txtCantidadPresentacionKeyPressed

    private void txtCantidadEquivalenciaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadEquivalenciaKeyPressed
        // TODO add your handling code here:
         if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtPrecioCompraPresentacion.requestFocus();
            
        }
    }//GEN-LAST:event_txtCantidadEquivalenciaKeyPressed

    private void txtPrecioCompraPresentacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraPresentacionKeyPressed
        // TODO add your handling code here:
         if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtMargenGananciaPresentacion.requestFocus();
        }
    }//GEN-LAST:event_txtPrecioCompraPresentacionKeyPressed

    private void txtMargenGananciaPresentacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaPresentacionKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            txtMargenGananciaEquivalencia.requestFocus();
        } 
    }//GEN-LAST:event_txtMargenGananciaPresentacionKeyPressed

    private void txtMargenGananciaEquivalenciaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenGananciaEquivalenciaKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
            btnAgregar.doClick();
            txtBarras.requestFocus();
        } 
    }//GEN-LAST:event_txtMargenGananciaEquivalenciaKeyPressed

    private void txtPrecioCompraUnidadesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraUnidadesKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() ==KeyEvent.VK_ENTER) {
           txtMargenGananciaEquivalencia.requestFocus();
        }  
    }//GEN-LAST:event_txtPrecioCompraUnidadesKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cmbMedida;
    private javax.swing.JComboBox<String> cmbProceso;
    private javax.swing.JComboBox<String> cmbTienda;
    private javax.swing.JComboBox<String> cmbTipoDocumento;
    private com.toedter.calendar.JDateChooser dcFechaVcto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTable tabla_entrada_productos;
    private javax.swing.JTextField txtBarras;
    private javax.swing.JTextField txtCantidadEquivalencia;
    private javax.swing.JTextField txtCantidadPresentacion;
    private javax.swing.JTextField txtEquivalencia;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtLote;
    private javax.swing.JTextField txtMargenGananciaEquivalencia;
    private javax.swing.JTextField txtMargenGananciaPresentacion;
    private javax.swing.JTextField txtNroDocumento;
    private javax.swing.JTextField txtPrecioCompraPresentacion;
    private javax.swing.JTextField txtPrecioCompraUnidades;
    private javax.swing.JTextField txtPrecioVentaPresentacion;
    private javax.swing.JTextField txtPrecioVentaUnidades;
    private javax.swing.JTextField txtProducto;
    // End of variables declaration//GEN-END:variables
}
